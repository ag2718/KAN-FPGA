// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="KAN_KAN,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu13p-flga2577-2-e,HLS_INPUT_CLOCK=3.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=1.852000,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=14,HLS_SYN_LUT=52,HLS_VERSION=2024_1}" *)

module KAN (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0,
        input_1,
        input_2,
        input_3,
        output_r
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] input_0;
input  [7:0] input_1;
input  [7:0] input_2;
input  [7:0] input_3;
output  [7:0] output_r;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [5:0] lut_0_0_0_address0;
wire   [3:0] lut_0_0_0_q0;
wire   [5:0] lut_0_0_1_address0;
wire   [1:0] lut_0_0_1_q0;
wire   [5:0] lut_0_0_2_address0;
wire   [2:0] lut_0_0_2_q0;
wire   [5:0] lut_0_0_3_address0;
wire   [1:0] lut_0_0_3_q0;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln25_fu_155_p1;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage0_01001;
reg    lut_0_0_0_ce0_local;
reg    lut_0_0_1_ce0_local;
reg    lut_0_0_2_ce0_local;
reg    lut_0_0_3_ce0_local;
wire   [0:0] bit_sel_fu_127_p3;
wire   [0:0] xor_ln6_fu_135_p2;
wire   [3:0] trunc_ln6_fu_141_p1;
wire   [5:0] index_fu_145_p4;
wire  signed [3:0] sext_ln22_fu_167_p1;
wire   [3:0] add_ln22_fu_171_p2;
wire  signed [4:0] sext_ln22_1_fu_177_p1;
wire  signed [4:0] sext_ln22_2_fu_181_p1;
wire   [4:0] add_ln22_1_fu_185_p2;
wire  signed [4:0] sext_ln20_fu_163_p1;
wire   [4:0] add_ln22_2_fu_191_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

KAN_lut_0_0_0_RAM_1P_LUTRAM_1R1W #(
    .DataWidth( 4 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
lut_0_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lut_0_0_0_address0),
    .ce0(lut_0_0_0_ce0_local),
    .q0(lut_0_0_0_q0)
);

KAN_lut_0_0_1_RAM_1P_LUTRAM_1R1W #(
    .DataWidth( 2 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
lut_0_0_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lut_0_0_1_address0),
    .ce0(lut_0_0_1_ce0_local),
    .q0(lut_0_0_1_q0)
);

KAN_lut_0_0_2_RAM_1P_LUTRAM_1R1W #(
    .DataWidth( 3 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
lut_0_0_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lut_0_0_2_address0),
    .ce0(lut_0_0_2_ce0_local),
    .q0(lut_0_0_2_q0)
);

KAN_lut_0_0_3_RAM_1P_LUTRAM_1R1W #(
    .DataWidth( 2 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
lut_0_0_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lut_0_0_3_address0),
    .ce0(lut_0_0_3_ce0_local),
    .q0(lut_0_0_3_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lut_0_0_0_ce0_local = 1'b1;
    end else begin
        lut_0_0_0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lut_0_0_1_ce0_local = 1'b1;
    end else begin
        lut_0_0_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lut_0_0_2_ce0_local = 1'b1;
    end else begin
        lut_0_0_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lut_0_0_3_ce0_local = 1'b1;
    end else begin
        lut_0_0_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln22_1_fu_185_p2 = ($signed(sext_ln22_1_fu_177_p1) + $signed(sext_ln22_2_fu_181_p1));

assign add_ln22_2_fu_191_p2 = ($signed(add_ln22_1_fu_185_p2) + $signed(sext_ln20_fu_163_p1));

assign add_ln22_fu_171_p2 = ($signed(sext_ln22_fu_167_p1) + $signed(lut_0_0_0_q0));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign bit_sel_fu_127_p3 = input_0[32'd4];

assign index_fu_145_p4 = {{{xor_ln6_fu_135_p2}, {trunc_ln6_fu_141_p1}}, {1'd0}};

assign lut_0_0_0_address0 = zext_ln25_fu_155_p1;

assign lut_0_0_1_address0 = zext_ln25_fu_155_p1;

assign lut_0_0_2_address0 = zext_ln25_fu_155_p1;

assign lut_0_0_3_address0 = zext_ln25_fu_155_p1;

assign output_r = $signed(add_ln22_2_fu_191_p2);

assign sext_ln20_fu_163_p1 = $signed(lut_0_0_3_q0);

assign sext_ln22_1_fu_177_p1 = $signed(add_ln22_fu_171_p2);

assign sext_ln22_2_fu_181_p1 = $signed(lut_0_0_2_q0);

assign sext_ln22_fu_167_p1 = $signed(lut_0_0_1_q0);

assign trunc_ln6_fu_141_p1 = input_0[3:0];

assign xor_ln6_fu_135_p2 = (bit_sel_fu_127_p3 ^ 1'd1);

assign zext_ln25_fu_155_p1 = index_fu_145_p4;

endmodule //KAN
